# Métricas Necessárias para o ETFCurator

## 1. Métricas Essenciais (Obrigatórias)

### Identificação Básica
- `symbol` (texto): Ticker de negociação do ETF. Identificador único.
- `name` (texto): Nome oficial do fundo.
- `description` (texto): Descrição do objetivo de investimento.
- `category` (texto): Categoria do ETF (ex: 'Large Blend', 'Bond', etc.).
- `exchange` (texto): Bolsa onde é negociado.

### Métricas de Performance
- `returns_12m` (decimal): Retorno dos últimos 12 meses.
  * Formato: 0.1234 = 12.34%
  * Validação: -0.95 a 5.00 (-95% a 500%)
  * Uso: Dashboard, Rankings, Screener

- `volatility_12m` (decimal): Volatilidade anualizada 12 meses.
  * Formato: 0.1234 = 12.34%
  * Validação: 0.01 a 2.00 (1% a 200%)
  * Uso: Análise de Risco, Screener

- `sharpe_12m` (decimal): Índice Sharpe 12 meses.
  * Formato: 1.23 (ratio)
  * Validação: -10 a 10
  * Uso: Rankings, Recomendações

### Métricas de Tamanho/Liquidez
- `total_assets` (decimal): Patrimônio total em USD.
  * Formato: 1000000000 = $1B
  * Validação: > 1000000 ($1M)
  * Uso: Screener, Recomendações

- `volume` (inteiro): Volume médio diário.
  * Formato: Número de cotas
  * Validação: > 0
  * Uso: Análise de Liquidez

### Métricas de Renda
- `dividend_yield` (decimal): Dividend Yield atual.
  * Formato: 0.0234 = 2.34%
  * Validação: 0 a 0.50 (0% a 50%)
  * Uso: Rankings, Screener

## 2. Métricas Importantes (Recomendadas)

### Performance Estendida
- `returns_24m` (decimal): Retorno 24 meses.
  * Validação: -0.95 a 10.00 (-95% a 1000%)
  * Uso: Análise Histórica

- `returns_36m` (decimal): Retorno 36 meses.
  * Validação: -0.95 a 15.00 (-95% a 1500%)
  * Uso: Análise Histórica

### Risco Estendido
- `volatility_24m` (decimal): Volatilidade 24 meses.
  * Validação: 0.01 a 2.00 (1% a 200%)

- `volatility_36m` (decimal): Volatilidade 36 meses.
  * Validação: 0.01 a 2.00 (1% a 200%)

- `max_drawdown` (decimal): Máxima queda histórica.
  * Formato: -0.3390 = -33.90%
  * Validação: -1 a 0 (-100% a 0%)
  * Uso: Análise de Risco

### Custos
- `expense_ratio` (decimal): Taxa de administração.
  * Formato: 0.0045 = 0.45%
  * Validação: 0 a 0.025 (0% a 2.5%)
  * Uso: Screener, Recomendações

## 3. Métricas Adicionais (Opcionais)

### Performance Longo Prazo
- `returns_5y` (decimal): Retorno 5 anos.
- `ten_year_return` (decimal): Retorno 10 anos.

### Risco Longo Prazo
- `sharpe_24m` (decimal): Índice Sharpe 24 meses.
- `sharpe_36m` (decimal): Índice Sharpe 36 meses.
- `ten_year_sharpe` (decimal): Índice Sharpe 10 anos.
- `ten_year_volatility` (decimal): Volatilidade 10 anos.

### Dividendos Históricos
- `dividends_12m` (decimal): Dividendos últimos 12 meses.
- `dividends_24m` (decimal): Dividendos últimos 24 meses.
- `dividends_36m` (decimal): Dividendos últimos 36 meses.
- `dividends_all_time` (decimal): Dividendos desde o início.

### Datas
- `inception_date` (data): Data de lançamento.
- `start_date` (data): Início da série histórica.
- `end_date` (data): Fim da série histórica.

## 4. Métricas Calculadas (Geradas pelo Sistema)

### Análise de Risco
- `risk_level` (texto): 'Baixo', 'Moderado', 'Alto'.
  * Calculado com base em volatility_12m e max_drawdown.

- `quality_score` (inteiro): 0-100.
  * Calculado com base em múltiplas métricas.

### Performance Rating
- `performance_rating` (texto): 'A', 'B', 'C', 'D'.
  * Calculado com base em returns_12m e sharpe_12m.

## 5. Dados FMP (Financial Modeling Prep)

### Dados Enriquecidos
- `fmp_data` (objeto):
  * `expense_ratio`: Taxa de administração
  * `price_avg_50`: Média móvel 50 dias
  * `price_avg_200`: Média móvel 200 dias
  * `year_high`: Máxima do ano
  * `year_low`: Mínima do ano
  * `top_holdings`: Array de holdings
  * `sector_weights`: Pesos por setor
  * `country_weights`: Pesos por país
  * `fmp_enhanced`: Boolean
  * `fmp_last_update`: Data última atualização
  * `data_quality_score`: Score de qualidade dos dados

## 6. Validações e Tratamento de Dados

### Regras de Validação
1. Todos os valores percentuais devem ser armazenados como decimais (0.1234 = 12.34%)
2. Valores fora dos limites de validação devem ser marcados como `null`
3. Dados históricos devem ter consistência temporal
4. Dados ausentes não devem impedir o funcionamento do app

### Tratamento de Dados Ausentes
1. Interface deve mostrar "N/A" para dados ausentes
2. Cálculos devem ignorar valores `null`
3. Rankings e screener devem filtrar ETFs sem dados essenciais

### Atualização de Dados
1. Frequência: Diária para métricas principais
2. Fonte primária: FMP API
3. Backup: Cálculos próprios baseados em preços históricos
4. Validação cruzada entre fontes quando possível

## 7. Priorização de Implementação

### Fase 1 - Essencial
- Todas as Métricas Essenciais
- Métricas de Risco Básicas
- Dados FMP Principais

### Fase 2 - Importante
- Métricas Importantes
- Métricas Calculadas
- Dados FMP Enriquecidos

### Fase 3 - Complementar
- Métricas Adicionais
- Histórico Completo
- Análises Avançadas

## 8. Métricas de Mercado e Preço

### Preços e Variações
- `price` (decimal): Preço atual.
- `change` (decimal): Variação absoluta no dia.
- `change_percentage` (decimal): Variação percentual no dia.
- `day_low` (decimal): Mínima do dia.
- `day_high` (decimal): Máxima do dia.
- `year_low` (decimal): Mínima do ano.
- `year_high` (decimal): Máxima do ano.
- `price_avg_50` (decimal): Média móvel de 50 dias.
- `price_avg_200` (decimal): Média móvel de 200 dias.
- `avg_volume` (decimal): Volume médio.

### Métricas de Valor
- `market_cap` (decimal): Valor de mercado.
- `pe_ratio` (decimal): Índice preço/lucro.
- `price_to_book` (decimal): Índice preço/valor patrimonial.
- `average_market_cap` (decimal): Capitalização média das holdings.

### Métricas de Risco Adicionais
- `beta_3y` (decimal): Beta de 3 anos.
- `alpha` (decimal): Alpha do fundo.
- `tracking_error` (decimal): Erro de acompanhamento.
- `number_of_holdings` (inteiro): Número de ativos na carteira.

## 9. Métricas de Carteira

### Métricas de Posição
- `shares` (inteiro): Quantidade de cotas.
- `average_cost` (decimal): Preço médio de compra.
- `current_value` (decimal): Valor atual da posição.
- `total_return` (decimal): Retorno total.
- `return_percentage` (decimal): Retorno percentual.
- `weight_percentage` (decimal): Peso na carteira.

### Métricas de Portfólio
- `expected_return` (decimal): Retorno esperado da carteira.
- `diversification_score` (decimal): Score de diversificação (0-100).
- `sector_exposure` (objeto): Exposição por setor.
- `region_exposure` (objeto): Exposição por região.

## 10. Dados de Preço Histórico

### Série Histórica
- `historical_prices` (array de objetos):
  * `date` (data): Data do pregão
  * `open` (decimal): Preço de abertura
  * `high` (decimal): Máxima do dia
  * `low` (decimal): Mínima do dia
  * `close` (decimal): Preço de fechamento
  * `adj_close` (decimal): Preço ajustado
  * `volume` (inteiro): Volume do dia
  * `unadjusted_volume` (inteiro): Volume não ajustado
  * `vwap` (decimal): Preço médio ponderado por volume

### Dados de Dividendos
- `dividend_data` (array de objetos):
  * `date` (data): Data do pagamento
  * `adj_dividend` (decimal): Dividendo ajustado
  * `dividend` (decimal): Dividendo bruto

## 11. Alertas e Notificações

### Configurações de Alerta
- `alert_type`: Tipo do alerta ('price_above', 'price_below', 'return_above', 'return_below', 'volume_spike', 'dividend_announcement')
- `target_value` (decimal): Valor alvo para o alerta
- `is_active` (booleano): Status do alerta
- `is_triggered` (booleano): Se o alerta foi disparado
- `triggered_at` (data): Data/hora do disparo

## 12. Categorias de ETFs

### Ações por Setor
- `EQUITY_TECHNOLOGY`: Ações: Tecnologia
- `EQUITY_FINANCIALS`: Ações: Financeiro
- `EQUITY_HEALTHCARE`: Ações: Saúde
- `EQUITY_CONSUMER_DISCRETIONARY`: Ações: Consumo Discricionário
- `EQUITY_CONSUMER_STAPLES`: Ações: Consumo Básico
- `EQUITY_INDUSTRIALS`: Ações: Industrial
- `EQUITY_ENERGY`: Ações: Energia
- `EQUITY_MATERIALS`: Ações: Materiais Básicos
- `EQUITY_REAL_ESTATE`: Ações: Imobiliário (REITs de Ações)
- `EQUITY_UTILITIES`: Ações: Utilidades
- `EQUITY_COMMUNICATION_SERVICES`: Ações: Serviços de Comunicação

### Ações por Região/Estilo
- `EQUITY_GLOBAL`: Ações: Global
- `EQUITY_US_LARGE_CAP`: Ações: EUA Large Cap
- `EQUITY_US_SMALL_CAP`: Ações: EUA Small Cap
- `EQUITY_EMERGING_MARKETS`: Ações: Mercados Emergentes
- `EQUITY_DEVELOPED_MARKETS`: Ações: Mercados Desenvolvidos
- `EQUITY_FACTOR_MOMENTUM`: Ações: Fator Momentum
- `EQUITY_FACTOR_VALUE`: Ações: Fator Value
- `EQUITY_FACTOR_GROWTH`: Ações: Fator Growth
- `EQUITY_FACTOR_QUALITY`: Ações: Fator Qualidade
- `EQUITY_FACTOR_LOW_VOLATILITY`: Ações: Fator Baixa Volatilidade
- `EQUITY_DIVIDEND`: Ações: Dividendos

### Renda Fixa
- `FIXED_INCOME_GOVERNMENT_TREASURY`: Renda Fixa: Tesouro/Governo
- `FIXED_INCOME_CORPORATE`: Renda Fixa: Corporativo
- `FIXED_INCOME_MUNICIPAL`: Renda Fixa: Municipal
- `FIXED_INCOME_HIGH_YIELD`: Renda Fixa: High Yield
- `FIXED_INCOME_AGGREGATE`: Renda Fixa: Agregado/Amplo
- `FIXED_INCOME_SHORT_TERM`: Renda Fixa: Curto Prazo
- `FIXED_INCOME_INTERMEDIATE_TERM`: Renda Fixa: Médio Prazo
- `FIXED_INCOME_LONG_TERM`: Renda Fixa: Longo Prazo
- `FIXED_INCOME_TIPS`: Renda Fixa: TIPS (Protegido da Inflação)
- `FIXED_INCOME_GLOBAL`: Renda Fixa: Global

### Commodities
- `COMMODITIES_GOLD`: Commodities: Ouro
- `COMMODITIES_SILVER`: Commodities: Prata
- `COMMODITIES_OIL`: Commodities: Petróleo
- `COMMODITIES_AGRICULTURAL`: Commodities: Agrícola
- `COMMODITIES_BROAD`: Commodities: Amplo

### Moedas e Alternativos
- `CURRENCY`: Moedas
- `PREFERRED_STOCK`: Alternativos: Ações Preferenciais
- `BDC`: Alternativos: BDC (Business Development Co.)
- `CLO`: Alternativos: CLO (Collateralized Loan Obligation)
- `OPTIONS_STRATEGY`: Alternativos: Estratégias com Opções
- `VOLATILITY_PRODUCTS`: Alternativos: Produtos de Volatilidade
- `LEVERAGED_INVERSE`: Alternativos: Alavancado/Inverso
- `MULTI_ASSET_ALLOCATION`: Alternativos: Multi-Ativos/Alocação
- `OTHER`: Outros

## 13. Categorias de Métricas

### Performance
- Métricas: returns_12m, returns_5y, sharpe_12m, beta
- Descrição: Métricas relacionadas ao retorno e performance histórica

### Risco
- Métricas: volatility_12m, max_drawdown
- Descrição: Indicadores de risco e volatilidade em diferentes períodos

### Fundamentos
- Métricas: total_assets, expense_ratio, dividend_yield, volume, pe_ratio, pb_ratio
- Descrição: Características fundamentais do ETF

### Composição
- Métricas: top_holdings, sector_allocation, geographic_exposure
- Descrição: Detalhes sobre a composição e holdings

## 14. Categorias de Recomendação

### Tipos de Recomendação
- `core`: ETFs base da carteira
- `growth`: ETFs de crescimento
- `defensive`: ETFs defensivos
- `opportunistic`: ETFs oportunísticos

### Critérios de Análise
1. Diversificação adequada ao perfil
2. Balanceamento risco/retorno
3. Eficiência de custos (expense ratio)
4. Liquidez (total assets)
5. Performance histórica consistente

## 15. Regras de Validação e Negócio

### Limites de Sanidade
| Métrica | Limite Mínimo | Limite Máximo | Ação se Exceder |
|---------|---------------|---------------|-----------------|
| **returns_12m** | -99% | +1000% | Definir como `null` |
| **volatility_12m** | 0% | +500% | Definir como `null` |
| **sharpe_12m** | -50 | +50 | Definir como `null` |
| **dividend_yield** | 0% | +50% | Manter (valores altos possíveis) |

### Estratégia de Correção
1. **Preservação de Dados**: Nunca deletar, apenas marcar como `null`
2. **Backup Automático**: Via Supabase antes de qualquer alteração
3. **Correção em Cascata**: Se returns_12m é inválido, limpar returns_24m e returns_36m
4. **Validação Cruzada**: Comparar com múltiplas fontes antes de aplicar

### Regras de Cálculo de Score
1. **Score Base**: 50 pontos
2. **Performance (max 25 pts)**:
   - returns_12m / 2 (limitado a 25)
3. **Sharpe (max 15 pts)**:
   - sharpe_12m * 10 (limitado a 15)
4. **Tamanho (max 10 pts)**:
   - log10(total_assets/1M) * 2 (limitado a 10)
5. **Penalidades**:
   - expense_ratio * -20
6. **Ajustes por Perfil**:
   - Conservador:
     * +10 pts se volatility_12m < 15%
     * +5 pts se dividend_yield > 2%
   - Agressivo:
     * +10 pts se returns_12m > 20%
     * +5 pts se for ETF de crescimento

### Regras de Categorização
1. **Prioridade 1**: Nome do ETF e símbolo
2. **Prioridade 2**: Análise de composição setorial
3. **Prioridade 3**: Perfil e indústria
4. **Fallback**: Categoria 'OTHER'

### Regras de Atualização
1. **Frequência**:
   - Preços: Diário
   - Métricas: Diário
   - Composição: Semanal
   - Dados FMP: Diário
2. **Ordem de Processamento**:
   - Dados básicos
   - Preços históricos
   - Dividendos
   - Métricas calculadas
   - Categorização
3. **Validações**:
   - Verificar consistência temporal
   - Validar limites de sanidade
   - Confirmar dados críticos

### Regras de Exibição
1. **Formatação**:
   - Percentuais: 2 casas decimais
   - Valores monetários: Notação apropriada (M, B)
   - Datas: Formato local
2. **Valores Ausentes**:
   - Exibir "N/A"
   - Excluir de rankings
   - Alertar usuário quando relevante
3. **Ordenação**:
   - Performance: Decrescente
   - Risco: Crescente
   - Tamanho: Decrescente

### Regras de Recomendação
1. **Critérios de Inclusão**:
   - Dados completos e atualizados
   - Volume mínimo de negociação
   - Histórico suficiente
2. **Critérios de Exclusão**:
   - ETFs alavancados para perfis conservadores
   - ETFs com dados incompletos
   - ETFs com baixa liquidez
3. **Pesos por Perfil**:
   - Conservador:
     * 60% core
     * 20% defensive
     * 15% growth
     * 5% opportunistic
   - Moderado:
     * 40% core
     * 30% growth
     * 20% defensive
     * 10% opportunistic
   - Agressivo:
     * 30% core
     * 40% growth
     * 15% defensive
     * 15% opportunistic

## 16. Estrutura do Banco de Dados

### Tabela: etfs
```sql
CREATE TABLE public.etfs (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    symbol text NOT NULL UNIQUE,
    name text,
    description text,
    category text,
    exchange text,
    inception_date date,
    total_assets numeric,
    volume numeric,
    ten_year_return numeric,
    returns_12m numeric,
    returns_24m numeric,
    returns_36m numeric,
    volatility_12m numeric,
    volatility_24m numeric,
    volatility_36m numeric,
    ten_year_volatility numeric,
    sharpe_12m numeric,
    sharpe_24m numeric,
    sharpe_36m numeric,
    ten_year_sharpe numeric,
    max_drawdown numeric,
    dividends_12m numeric,
    dividends_24m numeric,
    dividends_36m numeric,
    dividends_all_time numeric,
    dividend_yield numeric,
    start_date date,
    end_date date,
    updated_at timestamptz DEFAULT now() NOT NULL
);
```

### Tabela: portfolios
```sql
CREATE TABLE public.portfolios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    CONSTRAINT portfolios_name_not_empty CHECK (LENGTH(TRIM(name)) > 0),
    CONSTRAINT portfolios_user_name_unique UNIQUE (user_id, name)
);
```

### Tabela: portfolio_holdings
```sql
CREATE TABLE public.portfolio_holdings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    portfolio_id UUID NOT NULL REFERENCES public.portfolios(id) ON DELETE CASCADE,
    etf_symbol VARCHAR(10) NOT NULL,
    shares DECIMAL(15,4) NOT NULL,
    average_cost DECIMAL(15,4) NOT NULL,
    current_price DECIMAL(15,4) DEFAULT 100.00,
    purchase_date TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    CONSTRAINT portfolio_holdings_shares_positive CHECK (shares > 0),
    CONSTRAINT portfolio_holdings_cost_positive CHECK (average_cost > 0),
    CONSTRAINT portfolio_holdings_price_positive CHECK (current_price > 0),
    CONSTRAINT portfolio_holdings_unique UNIQUE (portfolio_id, etf_symbol, purchase_date)
);
```

### Tabela: alerts
```sql
CREATE TABLE public.alerts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    etf_symbol VARCHAR(10) NOT NULL,
    alert_type VARCHAR(50) NOT NULL,
    target_value DECIMAL(15,4) NOT NULL,
    current_value DECIMAL(15,4),
    is_active BOOLEAN DEFAULT true,
    is_triggered BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    triggered_at TIMESTAMPTZ,
    message TEXT
);
```

### Tabela: presets
```sql
CREATE TABLE public.presets (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    filters JSONB NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### Índices
```sql
CREATE INDEX idx_etfs_symbol ON public.etfs USING btree (symbol);
CREATE INDEX idx_portfolios_user_id ON public.portfolios(user_id);
CREATE INDEX idx_portfolios_created_at ON public.portfolios(created_at DESC);
CREATE INDEX idx_portfolio_holdings_portfolio_id ON public.portfolio_holdings(portfolio_id);
CREATE INDEX idx_portfolio_holdings_etf_symbol ON public.portfolio_holdings(etf_symbol);
```

### Políticas de Segurança (RLS)
```sql
-- ETFs
ALTER TABLE public.etfs ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public etfs are viewable by everyone." ON public.etfs FOR SELECT USING (true);
CREATE POLICY "Users can insert their own etfs." ON public.etfs FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);
CREATE POLICY "Users can update their own etfs." ON public.etfs FOR UPDATE USING (auth.uid() IS NOT NULL);

-- Portfolios
ALTER TABLE public.portfolios ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own portfolios." ON public.portfolios FOR ALL USING (auth.uid() = user_id);

-- Portfolio Holdings
ALTER TABLE public.portfolio_holdings ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own holdings." ON public.portfolio_holdings FOR ALL USING (
    EXISTS (
        SELECT 1 FROM public.portfolios p 
        WHERE p.id = portfolio_id AND p.user_id = auth.uid()
    )
);

-- Presets
ALTER TABLE public.presets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own presets." ON public.presets FOR ALL USING (auth.uid() = user_id);
```

### Tipos de Dados Enriquecidos (FMP)
```typescript
interface FMPData {
  expense_ratio?: number;
  price_avg_50?: number;
  price_avg_200?: number;
  year_high?: number;
  year_low?: number;
  top_holdings?: Array<{
    asset: string;
    weightPercentage: number;
  }>;
  sector_weights?: Array<{
    sector: string;
    weightPercentage: number;
  }>;
  country_weights?: Array<{
    country: string;
    weightPercentage: number;
  }>;
  fmp_enhanced: boolean;
  fmp_last_update: string;
  data_quality_score: number;
}
```

## 17. Interfaces e Tipos TypeScript

### ETF Base
```typescript
interface ETF {
  id?: string;
  symbol: string;
  name?: string | null;
  description?: string | null;
  category?: string | null;
  exchange?: string | null;
  inception_date?: string | null;
  total_assets?: number | null;
  volume?: number | null;
  ten_year_return?: number | null;
  returns_12m?: number | null;
  returns_24m?: number | null;
  returns_36m?: number | null;
  returns_3y?: number | null;
  returns_5y?: number | null;
  volatility_12m?: number | null;
  volatility_24m?: number | null;
  volatility_36m?: number | null;
  ten_year_volatility?: number | null;
  sharpe_12m?: number | null;
  sharpe_24m?: number | null;
  sharpe_36m?: number | null;
  ten_year_sharpe?: number | null;
  max_drawdown?: number | null;
  dividends_12m?: number | null;
  dividends_24m?: number | null;
  dividends_36m?: number | null;
  dividends_all_time?: number | null;
  dividend_yield?: number | null;
  expense_ratio?: number | null;
  pe_ratio?: number | null;
  price_to_book?: number | null;
  average_market_cap?: number | null;
  number_of_holdings?: number | null;
  beta_3y?: number | null;
  start_date?: string | null;
  end_date?: string | null;
}
```

### Portfolio e Holdings
```typescript
interface Portfolio {
  id: string;
  user_id: string;
  name: string;
  description?: string;
  total_value: number;
  total_cost: number;
  total_return: number;
  return_percentage: number;
  created_at: Date;
  updated_at: Date;
  holdings: PortfolioHolding[];
}

interface PortfolioHolding {
  id: string;
  portfolio_id: string;
  etf_symbol: string;
  etf_name?: string;
  shares: number;
  average_cost: number;
  current_price?: number;
  current_value: number;
  total_return: number;
  return_percentage: number;
  weight_percentage: number;
  purchase_date: Date;
}

interface PortfolioMetrics {
  expectedReturn: number;
  volatility: number;
  sharpeRatio: number;
  maxDrawdown: number;
  diversificationScore: number;
  expenseRatio: number;
  dividendYield: number;
  sectorExposure: Record<string, number>;
  regionExposure: Record<string, number>;
}
```

### Alertas
```typescript
interface Alert {
  id: string;
  userId: string;
  etfSymbol: string;
  etfName: string;
  type: AlertType;
  condition: AlertCondition;
  targetValue: number;
  currentValue?: number;
  isActive: boolean;
  isTriggered: boolean;
  createdAt: Date;
  triggeredAt?: Date;
  lastChecked?: Date;
  notificationMethods: NotificationMethod[];
  description?: string;
}

interface AlertNotification {
  id: string;
  alertId: string;
  etfSymbol: string;
  etfName: string;
  type: AlertType;
  message: string;
  triggeredAt: Date;
  isRead: boolean;
  data: {
    previousValue?: number;
    currentValue: number;
    targetValue: number;
    changePercentage?: number;
  };
}
```

### Recomendações
```typescript
interface ETFRecommendation {
  etf: ETF;
  score: number;
  reasons: string[];
  category: 'core' | 'growth' | 'defensive' | 'opportunistic';
  confidence: number;
}

interface RecommendationRequest {
  profile: InvestorProfile;
  availableETFs: ETF[];
  currentHoldings?: ETF[];
  preferences?: {
    sectors?: string[];
    regions?: string[];
    maxExpenseRatio?: number;
    minAssets?: number;
  };
}

interface RecommendationResponse {
  recommendations: ETFRecommendation[];
  summary: string;
  portfolioAllocation: {
    category: string;
    percentage: number;
    rationale: string;
  }[];
  warnings: string[];
  timestamp: Date;
}
```

### Análise de Risco
```typescript
interface RiskData {
  high_risk_etfs: RiskMetrics[];
  low_risk_etfs: RiskMetrics[];
  volatile_etfs: RiskMetrics[];
  stable_etfs: RiskMetrics[];
  portfolio_risk: {
    avg_volatility: number;
    avg_sharpe: number;
    risk_level: string;
    diversification_score: number;
  };
}

interface MarketInsight {
  id: string;
  type: 'market_trend' | 'performance_alert' | 'opportunity' | 'risk_warning' | 'educational';
  title: string;
  description: string;
  impact: 'low' | 'medium' | 'high';
  actionable: boolean;
  action?: {
    text: string;
    url: string;
  };
  timestamp: Date;
  relevantETFs?: string[];
}

interface PersonalizedRecommendation {
  type: 'portfolio_adjustment' | 'new_etf' | 'rebalancing' | 'education';
  title: string;
  description: string;
  confidence: number;
  reasoning: string[];
  relatedETFs?: ETF[];
}
```

## 18. Funções de Cálculo e Utilitários

### Cálculos Básicos
```typescript
// Calcular volatilidade
function calculateVolatility(prices: number[]): number | null {
  if (prices.length < 20) return null;
  
  const returns: number[] = [];
  for (let i = 1; i < prices.length; i++) {
    const dailyReturn = Math.log(prices[i] / prices[i - 1]);
    returns.push(dailyReturn);
  }
  
  const mean = returns.reduce((a, b) => a + b, 0) / returns.length;
  const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / (returns.length - 1);
  const stdDev = Math.sqrt(variance);
  
  return stdDev * Math.sqrt(252); // Anualizar (252 dias de trading)
}

// Calcular Sharpe Ratio
function calculateSharpe(annualReturn: number, volatility: number, riskFreeRate: number = 0.045): number | null {
  if (!volatility || volatility === 0) return null;
  let sharpe = (annualReturn - riskFreeRate) / volatility;

  // Limites de sanidade
  if (sharpe > 50) sharpe = 50;
  if (sharpe < -50) sharpe = -50;
  
  return sharpe;
}

// Calcular Max Drawdown
function calculateMaxDrawdown(prices: number[]): number | null {
  if (prices.length < 2) return null;
  
  let peakPrice = prices[0];
  let maxDrawdown = 0;
  
  for (let i = 0; i < prices.length; i++) {
    if (prices[i] > peakPrice) {
      peakPrice = prices[i];
    }
    const drawdown = (prices[i] - peakPrice) / peakPrice;
    if (drawdown < maxDrawdown) {
      maxDrawdown = drawdown;
    }
  }
  
  return maxDrawdown;
}

// Calcular Dividend Yield
function calculateDividendYield(dividends: DividendData[], currentPrice: number): number | null {
  if (!dividends.length || !currentPrice) return 0;
  
  const oneYearAgo = new Date();
  oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
  
  const annualDividends = dividends
    .filter(d => new Date(d.date) >= oneYearAgo)
    .reduce((sum, d) => sum + d.dividend, 0);
  
  return annualDividends / currentPrice;
}
```

### Cálculos de Score
```typescript
// Calcular Score de ETF
function calculateETFScore(etf: ETF, profile: InvestorProfile): number {
  let score = 50; // Score base

  // Performance (max 25 pts)
  if (etf.returns_12m) {
    score += Math.min(etf.returns_12m / 2, 25);
  }

  // Sharpe ratio (max 15 pts)
  if (etf.sharpe_12m) {
    score += Math.min(etf.sharpe_12m * 10, 15);
  }

  // Tamanho/Liquidez (max 10 pts)
  if (etf.total_assets) {
    const assetsScore = Math.log10(etf.total_assets / 1000000) * 2;
    score += Math.min(assetsScore, 10);
  }

  // Penalidade por expense ratio alto
  if (etf.expense_ratio) {
    score -= etf.expense_ratio * 20;
  }

  // Ajustes por perfil
  if (profile.riskTolerance === 'conservative') {
    if (etf.volatility_12m && etf.volatility_12m < 15) score += 10;
    if (etf.dividend_yield && etf.dividend_yield > 2) score += 5;
  } else if (profile.riskTolerance === 'aggressive') {
    if (etf.returns_12m && etf.returns_12m > 20) score += 10;
    if (isGrowthETF(etf)) score += 5;
  }

  return Math.max(0, Math.min(100, score));
}

// Calcular Score de Qualidade
function calculateQualityScore(etf: ETF): number {
  let score = 50;
  
  // Retorno 12m (25%)
  if (etf.returns_12m) {
    if (etf.returns_12m > 0.15) score += 20;
    else if (etf.returns_12m > 0.08) score += 15;
    else if (etf.returns_12m > 0.05) score += 10;
    else if (etf.returns_12m < 0) score -= 10;
  }
  
  // Sharpe ratio (20%)
  if (etf.sharpe_12m) {
    if (etf.sharpe_12m > 1.5) score += 15;
    else if (etf.sharpe_12m > 1.0) score += 10;
    else if (etf.sharpe_12m > 0.5) score += 5;
    else if (etf.sharpe_12m < 0) score -= 5;
  }
  
  // Volatilidade (15%)
  if (etf.volatility_12m) {
    if (etf.volatility_12m < 0.15) score += 10;
    else if (etf.volatility_12m < 0.25) score += 5;
    else if (etf.volatility_12m > 0.35) score -= 10;
  }
  
  // Patrimônio líquido (15%)
  if (etf.total_assets) {
    if (etf.total_assets > 10000000000) score += 10;
    else if (etf.total_assets > 1000000000) score += 8;
    else if (etf.total_assets > 100000000) score += 5;
    else if (etf.total_assets < 50000000) score -= 5;
  }
  
  // Dividend yield (10%)
  if (etf.dividend_yield && etf.dividend_yield > 0.02) {
    score += 5;
  }
  
  // Volume (10%)
  if (etf.volume) {
    if (etf.volume > 1000000) score += 5;
    else if (etf.volume < 10000) score -= 5;
  }
  
  // Max drawdown (5%)
  if (etf.max_drawdown && etf.max_drawdown > -0.20) {
    score += 5;
  }
  
  return Math.min(Math.max(score, 0), 100);
}
```

### Formatação de Valores
```typescript
const METRIC_TYPES: Record<string, MetricType> = {
  // Retornos
  returns_12m: 'percentage',
  returns_24m: 'percentage',
  returns_36m: 'percentage',
  returns_5y: 'percentage',
  ten_year_return: 'percentage',
  
  // Volatilidade
  volatility_12m: 'percentage',
  volatility_24m: 'percentage',
  volatility_36m: 'percentage',
  ten_year_volatility: 'percentage',
  
  // Sharpe
  sharpe_12m: 'sharpe',
  sharpe_24m: 'sharpe',
  sharpe_36m: 'sharpe',
  ten_year_sharpe: 'sharpe',
  
  // Dividendos
  dividend_yield: 'percentage',
  dividends_12m: 'currency',
  dividends_24m: 'currency',
  dividends_36m: 'currency',
  dividends_all_time: 'currency',
  
  // Outros
  expense_ratio: 'percentage',
  total_assets: 'currency',
  volume: 'volume',
  max_drawdown: 'percentage',
  beta: 'number',
  pe_ratio: 'number',
  pb_ratio: 'number'
};

function formatValue(value: number | undefined, type: 'currency' | 'percentage' | 'ratio' = 'percentage'): string {
  if (value === undefined || value === null) return 'N/A';
  
  switch (type) {
    case 'currency':
      return `$${(value / 1000000).toFixed(0)}M`;
    case 'percentage':
      return `${(value * 100).toFixed(2)}%`;
    case 'ratio':
      return value.toFixed(2);
    default:
      return value.toString();
  }
}
```

## 19. Validação e Correção de Dados

### Limites de Sanidade por Métrica

| Métrica | Limite Mínimo | Limite Máximo | Ação se Exceder |
|---------|---------------|---------------|-----------------|
| **returns_12m** | -99% | +1000% | Definir como `null` |
| **returns_24m** | -99% | +1000% | Definir como `null` |
| **returns_36m** | -99% | +1500% | Definir como `null` |
| **volatility_12m** | 0% | +500% | Definir como `null` |
| **volatility_24m** | 0% | +500% | Definir como `null` |
| **volatility_36m** | 0% | +500% | Definir como `null` |
| **sharpe_12m** | -50 | +50 | Definir como `null` |
| **sharpe_24m** | -50 | +50 | Definir como `null` |
| **sharpe_36m** | -50 | +50 | Definir como `null` |
| **dividend_yield** | 0% | +50% | Manter (valores altos possíveis) |
| **max_drawdown** | -100% | 0% | Definir como `null` |
| **total_assets** | $1M | - | Definir como `null` |
| **volume** | 0 | - | Definir como `null` |

### Estratégia de Correção

1. **Preservação de Dados**
   - Nunca deletar dados, apenas marcar como `null`
   - Manter histórico de alterações via Supabase
   - Backup automático antes de qualquer alteração em massa

2. **Correção em Cascata**
   - Se `returns_12m` é inválido, limpar `returns_24m` e `returns_36m`
   - Se `volatility_12m` é inválido, limpar `volatility_24m` e `volatility_36m`
   - Se `sharpe_12m` é inválido, limpar `sharpe_24m` e `sharpe_36m`

3. **Validação Cruzada**
   - Comparar com múltiplas fontes antes de aplicar correções
   - Verificar consistência entre métricas relacionadas
   - Usar média do setor como referência

4. **Normalização de Dados**
   - Converter todos os percentuais para formato decimal (0.1234 = 12.34%)
   - Padronizar datas para ISO 8601
   - Remover caracteres especiais de strings

### Scripts de Validação e Correção

1. `analyze-etf-data.ts`
   - Analisa os dados atuais no banco para detectar inconsistências
   - Gera relatório de valores suspeitos
   - Identifica padrões anormais

2. `standardize-etf-data.ts`
   - Padroniza dados que estejam fora do formato
   - Converte percentuais > 10 para formato decimal
   - Normaliza strings e datas

3. `recalculate-etf-metrics.ts`
   - Recalcula métricas usando dados históricos
   - Aplica limites de sanidade
   - Atualiza métricas derivadas

### Valores Suspeitos a Investigar

1. **Retornos**
   - Valores > 500% (exceto ETFs alavancados)
   - Valores < -95%
   - Inconsistência entre períodos

2. **Volatilidade**
   - Valores > 200%
   - Valores = 0%
   - Volatilidade muito baixa com retorno muito alto

3. **Sharpe Ratio**
   - Valores > 10
   - Valores < -10
   - Inconsistência com retorno/volatilidade

4. **Dividend Yield**
   - Valores > 50%
   - Dividendos > preço da cota
   - Inconsistência histórica

### Processo de Correção

1. **Identificação**
   ```typescript
   function validateMetrics(etf: ETFData): boolean {
     if (etf.returns_12m && Math.abs(etf.returns_12m) > 10) return false;
     if (etf.volatility_12m && (etf.volatility_12m > 5 || etf.volatility_12m < 0)) return false;
     if (etf.sharpe_12m && Math.abs(etf.sharpe_12m) > 50) return false;
     return true;
   }
   ```

2. **Normalização**
   ```typescript
   function normalizePercentage(value: any, fieldName: string): number | null {
     if (value === null || value === undefined) return null;
     const numValue = Number(value);
     if (Math.abs(numValue) > 10) {
       return numValue / 100;
     }
     return numValue;
   }
   ```

3. **Atualização**
   ```typescript
   async function updateETFMetrics(symbol: string, metrics: any) {
     try {
       await prisma.etfs.update({
         where: { symbol },
         data: {
           ...metrics,
           updated_at: new Date()
         }
       });
     } catch (error) {
       console.error(`Erro ao atualizar ${symbol}:`, error);
     }
   }
   ```

### Monitoramento Contínuo

1. **Alertas**
   - Notificar sobre valores suspeitos
   - Monitorar mudanças bruscas
   - Acompanhar qualidade dos dados

2. **Logs**
   - Registrar todas as correções
   - Manter histórico de alterações
   - Documentar decisões de correção

3. **Relatórios**
   - Gerar relatórios semanais
   - Acompanhar métricas de qualidade
   - Identificar tendências de problemas 